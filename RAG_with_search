import google.cloud.discoveryengine as discoveryengine
from google.api_core.client_options import ClientOptions

def search_sample(
    project_id: str,
    location: str,
    engine_id: str,
    search_query: str,
) -> discoveryengine.SearchResponse:
    """
    Perform a search using Google Cloud Discovery Engine and retrieve file content.
    """
    try:
        client_options = (
            ClientOptions(api_endpoint=f"{location}-discoveryengine.googleapis.com")
            if location != "global"
            else None
        )
        client = discoveryengine.SearchServiceClient(client_options=client_options)
        serving_config = f"projects/{project_id}/locations/{location}/collections/default_collection/dataStores/{engine_id}/servingConfigs/default_config"

        request = discoveryengine.SearchRequest(
            serving_config=serving_config,
            query=search_query,
            page_size=5,
            query_expansion_spec=discoveryengine.SearchRequest.QueryExpansionSpec(
                condition=discoveryengine.SearchRequest.QueryExpansionSpec.Condition.AUTO,
            ),
            spell_correction_spec=discoveryengine.SearchRequest.SpellCorrectionSpec(
                mode=discoveryengine.SearchRequest.SpellCorrectionSpec.Mode.AUTO
            ),
        )
        response = client.search(request)
        return response
    except Exception as e:
        print(f"Error in search_sample: {str(e)}")
        return None

# Example user query
user_query = "What are symptoms of heart disease?"

# Perform the search
project_id = "prj-cdw-p-aiml-001-0b36"
location = "us"
engine_id = "mcg-chunks_1731875276342"

search_results = search_sample(
    project_id=project_id,
    location=location,
    engine_id=engine_id,
    search_query=user_query
)

# Display search results with content
if search_results:
    print("\nSearch Results:")
    for i, result in enumerate(search_results.results):
        print(f"\nResult {i+1}:")
        document = result.document
        title = document.derived_struct_data.get('title', 'No title available')
        content = document.derived_struct_data.get('content', 'No content available')
        link = document.derived_struct_data.get('link', 'No link available')
        
        print(f"Title: {title}")
        print(f"Content: {content[:500]}...")  # Display first 500 characters for brevity
        print(f"Link: {link}")
else:
    print("No results found or an error occurred.")
